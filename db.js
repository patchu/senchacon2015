// Generated by CoffeeScript 1.8.0
var Sequelize, destroy, get, getRestTable, init, insert, list, restTable, sendObjResponse, update;

Sequelize = require("sequelize");

restTable = null;

init = function() {
  var dbSql;
  dbSql = new Sequelize('database', 'username', 'password', {
    dialect: 'sqlite',
    storage: "./rest.sqlite",
    logging: false
  });
  return restTable = dbSql.define('Rest', {
    id: {
      type: Sequelize.INTEGER,
      primaryKey: true
    },
    text: Sequelize.STRING(200),
    priority: Sequelize.INTEGER
  });
};

getRestTable = function() {
  return restTable;
};

sendObjResponse = function(rows, callback) {
  var ar, retobj, row, _i, _len;
  ar = [];
  for (_i = 0, _len = rows.length; _i < _len; _i++) {
    row = rows[_i];
    ar.push(row.dataValues);
  }
  retobj = {
    success: true,
    total: ar.length,
    data: ar
  };
  if (callback) {
    callback(retobj);
  }
};

list = function(callback) {
  restTable.findAll({
    order: 'id'
  }).then(function(rows) {
    sendObjResponse(rows, callback);
  });
};

get = function(recid, callback) {
  restTable.findAll({
    where: {
      id: recid
    }
  }).then(function(rows) {
    sendObjResponse(rows, callback);
  });
};

insert = function(insertObj, callback) {
  restTable.max('id').then(function(retval) {
    var nextid;
    nextid = retval + 1;
    insertObj.id = nextid;
    restTable.create(insertObj).complete(function(err, results) {
      var retobj;
      retobj = {
        success: true
      };
      if (err) {
        retobj.success = false;
        console.log('error: ', err);
      }
      callback(retobj);
    });
  });
};

update = function(updateObj, callback) {
  restTable.update(updateObj, {
    where: {
      id: updateObj.id
    }
  }).then(function() {
    var retobj;
    retobj = {
      success: true
    };
    callback(retobj);
  });
};

destroy = function(recid, callback) {
  restTable.destroy({
    where: {
      id: recid
    }
  }).then(function() {
    var retobj;
    retobj = {
      success: true
    };
    callback(retobj);
  });
};

exports.init = init;

exports.list = list;

exports.get = get;

exports.destroy = destroy;

exports.insert = insert;

exports.update = update;

exports.getRestTable = getRestTable;
